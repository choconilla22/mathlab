# -*- coding: utf-8 -*-
"""Copy of Lab3temp_151_25C.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QakN-SuAN9w9xgLnIFGknk7vzsy_A52z

## MATH 151 Lab  3

::Put team members' names and section number here.

Timothy Alex, Alvaro Valerino, Sebastian
"""

import sympy as sp
from sympy.plotting import (plot,plot_parametric)

"""### Question 1

#### 1a
"""

import sympy
from sympy.abc import x, a, b
from sympy import E, sqrt, log, sin, cos, pi, oo
import matplotlib.pyplot as plt
import numpy as np

# Problem 1: Piecewise function limits and continuity

# Define the piecewise function
f_x_piecewise = sympy.Piecewise(
    (a * E**x + sympy.sin(b * x), x < 1),
    (b * sympy.log(x) + x**2, (x >= 1) & (x < 3)),
    (sympy.sqrt(x) + a * b, x >= 3)
)

# 1a) Find the limit of f(x) as x -> 3- (from the left)

limit_3_left = sympy.limit(f_x_piecewise, x, 3, dir='-')
print(f"Limit of f(x) as x -> 3- : {limit_3_left}")

# Find the limit of f(x) as x -> 3+ (from the right)
limit_3_right = sympy.limit(f_x_piecewise, x, 3, dir='+')
print(f"Limit of f(x) as x -> 3+ : {limit_3_right}")

"""#### 1b"""

import sympy
from sympy.abc import x, a, b
from sympy import E, sqrt, log, sin, cos, pi, oo
import matplotlib.pyplot as plt
import numpy as np

# 1b) Find the limit of f(x) as x -> 1- (from the left)

limit_1_left = sympy.limit(f_x_piecewise, x, 1, dir='-')
print(f"Limit of f(x) as x -> 1- : {limit_1_left}")

# Find the limit of f(x) as x -> 1+ (from the right)
limit_1_right = sympy.limit(f_x_piecewise, x, 1, dir='+')
print(f"Limit of f(x) as x -> 1+ : {limit_1_right}")

"""#### 1c"""

import sympy
from sympy.abc import x, a, b
from sympy import E, sqrt, log, sin, cos, pi, oo
import matplotlib.pyplot as plt
import numpy as np

# 1c) Find a and b for continuity

# For continuity at x=1: limit_1_left == limit_1_right
# a*E**1 + sin(b*1) = b*log(1) + 1**2
# a*E + sin(b) = 1
eq1 = a * E + sympy.sin(b) - 1

# For continuity at x=3: limit_3_left == limit_3_right
# b*log(3) + 3**2 = sqrt(3) + a*b
# b*log(3) + 9 = sqrt(3) + a*b
eq2 = b * sympy.log(3) + 9 - (sympy.sqrt(3) + a * b)

# Solve the system of equations
solution_ab = sympy.nsolve((eq1, eq2), (a, b), (0, 0)) # Initial guess (0, 0)
print(f"Values of a and b for continuity: a = {solution_ab[0]}, b = {solution_ab[1]}")

"""### Question 2

#### 2a
"""

import sympy
from sympy.abc import x, a, b
from sympy import oo, sin, cos

# Problem 2a: Sum of functions where individual limits don't exist, but the sum's limit does.

# Choose f(x) = x and g(x) = -x. Both limits as x->inf do not exist.
f_2a = x
g_2a = -x

# Find limits of f(x) and g(x)
limit_f_2a = sympy.limit(f_2a, x, oo)
limit_g_2a = sympy.limit(g_2a, x, oo)
print(f"f(x) = {f_2a}, g(x) = {g_2a}")
print(f"Limit of f(x) as x -> oo: {limit_f_2a}")
print(f"Limit of g(x) as x -> oo: {limit_g_2a}")

# Find limit of f(x) + g(x)
sum_2a = f_2a + g_2a
limit_sum_2a = sympy.limit(sum_2a, x, oo)
print(f"f(x) + g(x) = {sum_2a.simplify()}")
print(f"Limit of f(x) + g(x) as x -> oo: {limit_sum_2a}")

"""#### 2b"""

import sympy
from sympy.abc import x, a, b
from sympy import oo, sin, cos

# Problem 2b: Product of functions where individual limits don't exist, but the product's limit does.

# Choose f(x) = x * cos(x) and g(x) = 1 / (x * cos(x))
# Both limits as x->inf do not exist (oscillate, or undefined/infinity).
f_2b = x * sympy.cos(x)
g_2b = 1 / (x * sympy.cos(x))

# Find limits of f(x) and g(x)
limit_f_2b = sympy.limit(f_2b, x, oo)
limit_g_2b = sympy.limit(g_2b, x, oo)
print(f"f(x) = {f_2b}, g(x) = {g_2b}")
print(f"Limit of f(x) as x -> oo: {limit_f_2b}")
print(f"Limit of g(x) as x -> oo: {limit_g_2b}")

# Find limit of f(x) * g(x)
product_2b = f_2b * g_2b
limit_product_2b = sympy.limit(product_2b.simplify(), x, oo) # Use .simplify() for direct cancellation
print(f"f(x) * g(x) = {product_2b.simplify()}")
print(f"Limit of f(x) * g(x) as x -> oo: {limit_product_2b}")

"""### Question 3

#### 3a
"""

# Start your code here
import sympy as sp
from sympy import oo, sin, cos
from sympy.plotting import plot

x = sp.symbols("x")
f=2**x
g=x**20
fg=plot((f,(x,0,100)),(g,(x,0,100)))
print("f(x) is bigger")

"""#### 3b"""

# Start your code here
import sympy as sp
from sympy import solve
print("While g(x) initially grows faster, f(x) eventually overtakes and reaches a higher growth rate faster than g(x).")
x=sp.symbols("x")
f=2**x
g=x**20
#solve for x
xSolv=solve(f-g,x)
g=[i.evalf() for i in xSolv]
y=f.subs(x,g[0])
print("f(x) overtakes g(x) at x =",str(g[0])+",","y =",y)

"""#### 3c"""

# Start your code here
import sympy as sp
from sympy import oo, sin, cos
from sympy.plotting import plot

x = sp.symbols("x")
f=sp.ln(x)
g=x**(1/10)
fg=plot((f,(x,1,100)), (g,(x,1,100)), show=False, legend=True)
fg.show()

"""#### 3d"""

# Start your code here

"""#### 3e"""

# Start your code here